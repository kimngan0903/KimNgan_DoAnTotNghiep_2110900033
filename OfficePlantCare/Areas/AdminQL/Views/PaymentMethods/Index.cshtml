@model X.PagedList.IPagedList<OfficePlantCare.Models.PaymentMethod>
@using X.PagedList.Mvc.Core;

@{
    ViewData["Title"] = "Danh sách phương thức thanh toán";
    Layout = "~/Areas/AdminQL/Views/Shared/Admin.cshtml";
}

<link rel="stylesheet" href="~/assets/css/index.css?v2" />

<div class="pcoded-main-container">
    <div class="pcoded-content">
        <!-- Page Header -->
        <div class="page-header card shadow-sm border-0">
            <div class="page-block">
                <div class="row align-items-center">
                    <div class="col-md-12">
                        <div class="page-header-title d-flex justify-content-between align-items-center py-3 ml-3">
                            <h5 class="m-0 text-success font-weight-bold">QUẢN LÝ PHƯƠNG THỨC THANH TOÁN</h5>
                            <nav aria-label="breadcrumb">
                                <ol class="breadcrumb mb-0 bg-transparent">
                                    <li class="breadcrumb-item"><a asp-area="AdminQL" asp-controller="PaymentMethods" asp-action="Index"><i class="fas fa-home"></i></a></li>
                                    <li class="breadcrumb-item active" aria-current="page">DANH SÁCH PHƯƠNG THỨC THANH TOÁN</li>
                                </ol>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="row">
            <div class="col-sm-12">
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-white px-4 py-3 border-bottom">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="text-success font-weight-bold mb-0">DANH SÁCH PHƯƠNG THỨC THANH TOÁN</h5>
                            <div class="d-flex align-items-center gap-3">
                                <!-- Search Form -->
                                <form id="search-form" class="d-flex">
                                    <div class="input-group">
                                        <input type="text" class="form-control border-success rounded-pill" name="name" id="keyword"
                                               value="@ViewBag.keyword" placeholder="Nhập tên phương thức cần tìm" style="max-width: 250px;" />
                                      @*   <button type="submit" class="btn btn-success rounded-pill ml-2">
                                            <i class="fas fa-search"></i> Tìm
                                        </button> *@
                                    </div>
                                </form>
                                <!-- Add New Button -->
                                <a class="btn btn-success rounded-pill px-4" asp-action="Create">
                                    <i class="fas fa-plus"></i> Thêm mới
                                </a>
                            </div>
                        </div>
                    </div>

                    <div class="card-body p-4">
                        <div class="table-responsive">
                            <table class="table table-hover table-striped align-middle">
                                <thead class="bg-dark">
                                    <tr>
                                        <th class="text-muted text-center">
                                            @Html.DisplayNameFor(model => model.FirstOrDefault().MethodName)
                                        </th>
                                        <th class="text-muted text-center">Hành động</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model.Any())
                                    {
                                        @foreach (var item in Model)
                                        {
                                            <tr>
                                                <td class="text-center">@Html.DisplayFor(modelItem => item.MethodName)</td>
                                                <td class="text-center">
                                                    <div class="btn-group" role="group">
                                                        <button class="btn btn-outline-primary btn-sm" onclick="loadModal('@Url.Action("Edit", "PaymentMethods", new { id = item.PaymentMethodId })')"><i class="fas fa-edit"></i> Sửa</button>
                                                        <button class="btn btn-outline-info btn-sm" onclick="loadModal('@Url.Action("Details", "PaymentMethods", new { id = item.PaymentMethodId })')"><i class="fas fa-info-circle"></i> Chi tiết</button>
                                                        <button class="btn btn-outline-danger btn-sm" onclick="loadModal('@Url.Action("Delete", "PaymentMethods", new { id = item.PaymentMethodId })')"><i class="fas fa-trash-alt"></i> Xóa</button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="5" class="text-center text-muted py-3">
                                                Không có phương thức thanh toán nào.
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        @if (Model.Any())
                        {
                            <div class="d-flex justify-content-center mt-4">
                                @Html.PagedListPager(
                                         Model,
                                         page => Url.Action("Index", new { page = page, name = ViewBag.keyword }),
                                         new PagedListRenderOptions
                                {
                                    LiElementClasses = new[] { "page-item" },
                                    PageClasses = new[] { "page-link" },
                                    UlElementClasses = new[] { "pagination" },
                                    ActiveLiElementClass = "active",
                                    LinkToFirstPageFormat = "«",
                                    LinkToLastPageFormat = "»",
                                    LinkToNextPageFormat = "›",
                                    LinkToPreviousPageFormat = "‹",
                                    DisplayLinkToFirstPage = PagedListDisplayMode.Always,
                                    DisplayLinkToLastPage = PagedListDisplayMode.Always,
                                    DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
                                    DisplayLinkToNextPage = PagedListDisplayMode.Always
                                }
                                         )
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="modal-container" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content border-0 shadow-lg">
            <div class="modal-header text-white">
                <h5 class="modal-title text-success">THÔNG TIN</h5>
                <button type="button" class="close text-dark" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body" id="modal-content">
                <!-- Nội dung sẽ được tải bằng AJAX -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Load modal content via AJAX
        function loadModal(url) {
            $.get(url, function (data) {
                $("#modal-content").html(data);
                $("#modal-container").modal("show");
            });
        }

        // Function to update table content via AJAX
        function updateTable(page, name) {
            // Construct the URL with parameters
            let url = '@Url.Action("Index", "PaymentMethods")' + '?page=' + page;
            if (name) url += '&name=' + encodeURIComponent(name);

            // Fetch table content via AJAX
            fetch(url, {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest' // Indicate AJAX request
                }
            })
                .then(response => response.text())
                .then(data => {
                    // Parse the response HTML and extract the table and pagination
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(data, 'text/html');
                    const newTable = doc.querySelector('.table-responsive');
                    const newPagination = doc.querySelector('.pagination');

                    // Update the table content
                    document.querySelector('.table-responsive').innerHTML = newTable.innerHTML;

                    // Update pagination if it exists
                    const paginationContainer = document.querySelector('.d-flex.justify-content-center.mt-4');
                    if (newPagination && paginationContainer) {
                        paginationContainer.innerHTML = newPagination.outerHTML;
                        // Reattach event listeners to new pagination links
                        attachPaginationListeners();
                    } else if (paginationContainer) {
                        paginationContainer.innerHTML = ''; // Clear pagination if no results
                    }
                })
                .catch(error => console.error('Error updating table:', error));
        }

        // Function to attach click event listeners to pagination links
        function attachPaginationListeners() {
            const paginationLinks = document.querySelectorAll('.pagination a.page-link');
            paginationLinks.forEach(link => {
                link.addEventListener('click', function (e) {
                    e.preventDefault();
                    const href = this.getAttribute('href');
                    const urlParams = new URLSearchParams(href.split('?')[1] || '');
                    const page = urlParams.get('page') || 1;
                    const name = urlParams.get('name') || document.getElementById('keyword').value;

                    // Update table content for the clicked page
                    updateTable(page, name);
                });
            });
        }

        // On document ready
        document.addEventListener('DOMContentLoaded', function () {
            // Handle form submission (search by name)
            document.getElementById('search-form').addEventListener('submit', function (e) {
                e.preventDefault();
                const name = document.getElementById('keyword').value;
                // Update table with search parameters
                updateTable(1, name);
            });

            // Optional: Trigger search on keyword input change for real-time filtering
            document.getElementById('keyword').addEventListener('input', function () {
                const name = this.value;
                updateTable(1, name);
            });

            // Attach pagination listeners initially
            attachPaginationListeners();

            // Display success message if present
            const successMessage = '@Html.Raw(System.Web.HttpUtility.JavaScriptStringEncode(TempData["SuccessMessage"]?.ToString() ?? ""))';
            if (successMessage) {
                Swal.fire({
                    icon: 'success',
                    title: 'Thành công!',
                    text: successMessage,
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#1ABC9C'
                });
            }
        });
    </script>
}